import base64
import binascii
import json
import os
import requests
import qrcode
from time import time
from Crypto.PublicKey import RSA
from Crypto.Hash import SHA256
from Crypto.Hash import RIPEMD160
from Crypto.Signature import pkcs1_15
from src.validation import Funds
import PySimpleGUI as sg
import hashlib

class Wallet:
    unix_time = time()

    def __init__(self):

        if not os.path.isfile('data/wallet.json'):
            self.generate_wallet()

        self.nodes = []

        sg.theme('Black')

        # GUI INIT
        layout = [[sg.Text('Please enter the address/ip and port of a known node')],
                  [sg.InputText()],
                  [sg.Submit(), sg.Cancel()]]

        icon = base64.b64decode("")

        window = sg.Window('Wallet waiting to connect...', layout=layout, icon=icon)
        event, values = window.read()
        window.close()

        # variable inits
        self.node = values[0]
        self.nodes.append(self.node)

        sg.popup("Connecting to ", values[0], icon=icon)

        # get the chain from the blockchain node
        self.chain = self.get_chain()

        #load our wallet file
        wallet_file = json.load(open('data/wallet.json', 'r'))
        self.private_key = RSA.import_key(wallet_file['private key'])
        self.public_key = RSA.import_key(wallet_file['public key'])
        self.public_key_hex = wallet_file['public key hex']
        self.public_key_hash = wallet_file['public key hash']

        # if wallet doesnt exist we'll generate one
        if not os.path.exists('data'):
            os.makedirs('data')

        if not os.path.isfile('data/wallet_qr.png'):
            self.create_qr()

    # wallet file functions
    def generate_wallet(self):

        private_key = RSA.generate(2048)
        private_key_plain = private_key.export_key("PEM")
        public_key_plain = private_key.publickey().export_key("PEM")
        public_key = private_key.publickey().export_key("DER")
        public_key_hex = binascii.hexlify(public_key).decode("utf-8")
        public_key_hash = self.calculate_hash(self.calculate_hash(public_key_hex, hash_function="sha256"),
                                              hash_function="ripemd160")

        wallet_data = {
            'private key': private_key_plain.decode(),
            'public key': public_key_plain.decode(),
            'public key hex': public_key_hex,
            'public key hash': public_key_hash
        }
        self.write_json(wallet_data, 'w')

    def write_json(self, data, mode, filename='data/wallet.json'):
        # opens the file in write mode
        with open(filename, mode) as file:
            block_dict = json.dumps(data, indent=6)
            file.write(block_dict)

    def create_qr(self):
        data = self.public_key_hash
        qr = qrcode.QRCode(
            version=1,
            box_size=10,
            border=2)

        qr.add_data(data)
        qr.make(fit=True)
        img = qr.make_image(fill='black', back_color='white')
        img.save('data/wallet_qr.png')


    # hash functions
    @staticmethod
    def hash(block):
        # We must make sure that the Dictionary is Ordered, or we'll have inconsistent hashes
        block_string = json.dumps(block, sort_keys=True).encode()
        return hashlib.sha256(block_string).hexdigest()

    def calculate_hash(self, data, hash_function):
        data = bytearray(data, "utf-8")
        if hash_function == "sha256":
            h = SHA256.new()
            h.update(data)
            return h.hexdigest()
        if hash_function == "ripemd160":
            h = RIPEMD160.new()
            h.update(data)
            return h.hexdigest()




    # functions for transactions
    def new_transaction(self, recipient, amount, unix_time):

        sender = self.public_key_hash
        previous_block_hash = self.get_last_block_hash()


        trans_data = {
            'sender': sender,
            'recipient': recipient,
            'amount': amount,
            'time_submitted': unix_time,
            'previous_block_hash': previous_block_hash,
            'public_key_hex': self.public_key_hex
        }
        total_bytes = self.calculate_bytes(trans_data)
        fee = self.calculate_fee(total_bytes)
        total_amount = amount + fee

        transaction = {
            'sender': sender,
            'recipient': recipient,
            'amount': amount,
            'fee': fee,
            'time_submitted': unix_time,
            'previous_hash': previous_block_hash,
            'public_key_hex': self.public_key_hex
        }

        hashed_trans = self.hash(transaction)

        trans_with_hash = {
            'sender': sender,
            'recipient': recipient,
            'amount': amount,
            'fee': fee,
            'time_submitted': trans_data['time_submitted'],
            'previous_hash': previous_block_hash,
            'public_key_hex': self.public_key_hex,
            'transaction_hash': hashed_trans
        }

        signed_trans = self.sign(trans_with_hash)

        full_transaction = {
            'sender': sender,
            'recipient': recipient,
            'amount': amount,
            'fee': fee,
            'time_submitted': trans_data['time_submitted'],
            'previous_hash': previous_block_hash,
            'public_key_hex': self.public_key_hex,
            'transaction_hash': hashed_trans,
            'signature': signed_trans
        }

        icon = base64.b64decode('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')

        confirmation_window_layout = [
            [sg.Text("Are you sure you want to send this Transaction?")],
            [[sg.Text("Recipient", justification='left'), sg.Text(recipient, justification='right')]],
            [[sg.Text("Amount to send: ", justification='left')], [sg.Text(amount, justification='right')]],
            [[sg.Text("Transaction Fee: ", justification='left')], sg.Text(fee, justification='right')],
            [[sg.Text("Total Amount: ", justification='left')], sg.Text(total_amount, justification='right')],
            [[sg.Button('Confirm')], [sg.Button('Exit')]]
        ]

        window = sg.Window('Serpentcoin Wallet', layout=confirmation_window_layout, icon=icon)

        event, values = window.read()

        if event in (sg.WIN_CLOSED, 'Exit'):
            window.close()
            return "cancelled"

        if event in 'Confirm':
            if self.broadcast_transaction(full_transaction):
                self.chain = self.get_chain()
                window.close()
                return "confirmed"
            else:
                self.chain = self.get_chain()
                window.close()
                return False

    def broadcast_transaction(self, transaction):

        headers = {'Content-type': 'application/json', 'Accept': 'text/plain'}

        for node in self.nodes:
            response = requests.post(f'http://{node}/transactions/new', json=transaction, headers=headers)
            if response.status_code == 201:
                return True

            else:
                return False

    def sign_transaction_data(self, data):
        transaction_bytes = json.dumps(data, sort_keys=True).encode('utf-8')
        hash_object = SHA256.new(transaction_bytes)
        signature = pkcs1_15.new(self.private_key).sign(hash_object)
        return signature

    def calculate_bytes(self, transaction):
        tx_string = json.dumps(transaction)
        tx_bytes = tx_string.encode('ascii')
        return len(tx_bytes)

    def calculate_fee(self, tx_bytes_length):
        per_kb_fee = 0.25
        sig_hash_bytes = 800
        total = tx_bytes_length + sig_hash_bytes
        return (total / 1000) * per_kb_fee

    def sign(self, data):
        signature_hex = binascii.hexlify(self.sign_transaction_data(data)).decode("utf-8")

        return signature_hex

    # functions for getting blockchain data

    def get_balance(self):
        chain_balance = Funds.enumerate_funds(self.public_key_hash, self.chain)
        if chain_balance > 0:
            return chain_balance

        if chain_balance == False:
            return 0

    def get_block_height(self):
        for node in self.nodes:
            response = requests.get(f'http://{node}/chain')

            if response.status_code == 200:
                length = response.json()['length']
                chain = response.json()['chain']

                return chain[length - 1]['index']

    def get_last_block_hash(self):
        for node in self.nodes:
            response = requests.get(f'http://{node}/chain')

        if response.status_code == 200:
            length = response.json()['length']
            chain = response.json()['chain']

            return chain[length - 1]['block_hash']

    def get_chain(self):
        for node in self.nodes:
            response = requests.get(f'http://{node}/chain')

        if response.status_code == 200:
            chain = response.json()['chain']

            return chain


wallet = Wallet()

layout = [
    [sg.Column([[sg.Text('Welcome to the Serpentcoin wallet', )]], justification='center')],
    [sg.Column([[sg.Image('data/wallet_qr.png')]], justification='center')],
    [sg.Column([[sg.Text(wallet.public_key_hash)]], justification='center')],
    [sg.Column([[sg.Text('Available Funds:', )]], justification='center')],
    [sg.Column([[sg.Text(wallet.get_balance(), key='-BALANCE-')]], justification='center')],
    [sg.Button('Update Blockchain'), sg.Button('Transaction History')],
    [sg.Text("Address: "), sg.InputText(key='-ADDRESS-', size=(30, 20)), ],
    [sg.Text(" Amount: "),
     sg.InputText(key='-AMOUNT-', size=(30, 20))],
    [sg.Button('Send Transaction'), sg.Button('Exit')]
]
icon = base64.b64decode('')

window = sg.Window('Serpentcoin Wallet', layout=layout, icon=icon)
while True:
    event, values = window.read()
    if event in (sg.WIN_CLOSED, 'Exit'):
        break

    if event in 'Update Blockchain':
        wallet.chain = wallet.get_chain()
        wallet.get_balance()
        window['-BALANCE-'].update(wallet.get_balance())

    if event in 'Transaction History':
        # code to find relevant transactions in the blockchain pertaining to our wallets address
        chain = wallet.get_chain()  # get the chain
        sent = []  # list for storing sent transactions
        received = []  # list for storing received transactions
        for block in chain:  # iterate through the blockchain
            for transaction in block['transactions']:
                # code to find received transactions
                if transaction['recipient'] == wallet.public_key_hash:
                    print("received: ", transaction)
                    received.append(transaction)
                # code to find sent transactions
                if transaction['sender'] == wallet.public_key_hash:
                    print("sent: ", transaction)
                    sent.append(transaction)
                else:
                    continue

        sent_json = json.dumps(sent, indent=2)
        received_json = json.dumps(received, indent=2)

        transaction_window_layout = [
            [sg.Text("Sent Transactions:")],
            [sg.Multiline(sent_json, size=(100, 25))],
            [sg.Text("Received Transactions:")],
            [sg.Multiline(received_json, size=(100, 25))]
        ]

        icon = base64.b64decode('')
        transaction_window = sg.Window('Transaction History', layout=transaction_window_layout, icon=icon)
        events, values = transaction_window.read()

    if event in 'Send Transaction':
        time = wallet.unix_time
        recipient = values['-ADDRESS-']
        amount = float(values['-AMOUNT-'])
        if len(recipient) == 40:

            if wallet.new_transaction(recipient, amount, time) == "confirmed":
                sg.popup(
                    'Transaction submitted and accepted by network...\nPlease wait for next block confirmation for transaction to confirm')
                continue
            if wallet.new_transaction(recipient, amount, time) == "cancelled":
                sg.popup("Transaction Cancelled", icon=icon)
            else:
                sg.popup(
                    'Transaction denied by network\nyou either have unconfirmed transactions in the mempool or insufficient balance.\nPlease try again', icon=icon)
        else:
            sg.popup("Invalid address length, please double check your recipient address to avoid losing/burning funds.")
window.close()
